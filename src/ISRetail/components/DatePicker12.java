/*
 * DatePicker12.java
 *
 * Created on June 10, 2008, 6:47 PM
 */
package ISRetail.components;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author  Administrator
 */
public class DatePicker12 extends javax.swing.JPanel {

    private String month[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    int selectedmonth;
    String date;
    private JLabel daylabel[];
    private JLabel wdaylabel[];
    private String dayname[] = {"S", "M", "T", "W", "T", "F", "S"};
    private int yearstr;
    private int monstr;
    private int daystr;
    private String selectedday;
    private String selmonth;
    private String selyear;
    private String dd;
    private JFormattedTextField datefield;
    JLabel firstLabel;
    JLabel lastLabel;
    JLabel todaysLabel;
    private boolean visibility;
     private final Color selectedColor = new Color(255, 255, 150);//Color of Textfields when focu gained
    private final Color originalColor = new Color(255, 255, 255);//Color of Textfields when focu lost
    Calendar cal1a;
    final Calendar curCal = Calendar.getInstance();
    final java.awt.Color curDateColor = new java.awt.Color(152,190,252);
    final java.awt.Color focusColor = new Color(182,230,255);
    boolean first=true;
    int focussed=0;
    private static final GridBagConstraints gbc;
    static {
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.anchor = GridBagConstraints.NORTHWEST;
    }

   public static JPanel wrapInBackgroundImage(JComponent component,
            Icon backgroundIcon) {
        return wrapInBackgroundImage(
                component,
                backgroundIcon,
                JLabel.TOP,
                JLabel.LEFT);
    }



     public static JPanel wrapInBackgroundImage(JComponent component,
            Icon backgroundIcon,
            int verticalAlignment,
            int horizontalAlignment) {


        component.setOpaque(false);

        JPanel backgroundPanel = new JPanel(new GridBagLayout());
        backgroundPanel.add(component, gbc);
        JLabel backgroundImage = new JLabel(backgroundIcon);
        backgroundImage.setPreferredSize(new Dimension(1,1));
        backgroundImage.setMinimumSize(new Dimension(1,1));
        backgroundImage.setVerticalAlignment(verticalAlignment);
        backgroundImage.setHorizontalAlignment(horizontalAlignment);
        backgroundPanel.add(backgroundImage, gbc);
        return backgroundPanel;
    }





 /** Creates new form DatePicker12 */
    public DatePicker12() {
        initComponents();
        initmethod();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        yearprevious = new javax.swing.JButton();
        yearval = new javax.swing.JLabel();
        year10next = new javax.swing.JButton();
        year10back = new javax.swing.JButton();
        yearnext = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jDesktopPane3 = new javax.swing.JDesktopPane();
        monthprevoius = new javax.swing.JButton();
        monthnext = new javax.swing.JButton();
        monthval = new javax.swing.JLabel();
        monthbegin = new javax.swing.JButton();
        monthend = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setNextFocusableComponent(year10back);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jDesktopPane2.setBackground(new java.awt.Color(62, 100, 162));

        yearprevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/previous.gif"))); // NOI18N
        yearprevious.setBorderPainted(false);
        yearprevious.setContentAreaFilled(false);
        yearprevious.setNextFocusableComponent(yearnext);
        yearprevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearpreviousActionPerformed(evt);
            }
        });
        yearprevious.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        yearprevious.setBounds(30, 0, 30, 30);
        jDesktopPane2.add(yearprevious, javax.swing.JLayeredPane.DEFAULT_LAYER);

        yearval.setFont(new java.awt.Font("Verdana", 1, 12));
        yearval.setForeground(new java.awt.Color(255, 255, 255));
        yearval.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearval.setText("jLabel1");
        yearval.setBounds(60, 0, 100, 30);
        jDesktopPane2.add(yearval, javax.swing.JLayeredPane.DEFAULT_LAYER);

        year10next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/fast_forward1.png"))); // NOI18N
        year10next.setBorderPainted(false);
        year10next.setContentAreaFilled(false);
        year10next.setNextFocusableComponent(monthbegin);
        year10next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                year10nextActionPerformed(evt);
            }
        });
        year10next.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        year10next.setBounds(190, 0, 30, 30);
        jDesktopPane2.add(year10next, javax.swing.JLayeredPane.DEFAULT_LAYER);

        year10back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/rewind1.png"))); // NOI18N
        year10back.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        year10back.setBorderPainted(false);
        year10back.setContentAreaFilled(false);
        year10back.setNextFocusableComponent(yearprevious);
        year10back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                year10backActionPerformed(evt);
            }
        });
        year10back.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        year10back.setBounds(0, 0, 30, 30);
        jDesktopPane2.add(year10back, javax.swing.JLayeredPane.DEFAULT_LAYER);

        yearnext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/next1.gif"))); // NOI18N
        yearnext.setBorderPainted(false);
        yearnext.setContentAreaFilled(false);
        yearnext.setNextFocusableComponent(year10next);
        yearnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearnextActionPerformed(evt);
            }
        });
        yearnext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        yearnext.setBounds(160, 0, 30, 30);
        jDesktopPane2.add(yearnext, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane2.setBounds(0, 0, 220, 30);
        jDesktopPane1.add(jDesktopPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jSeparator2.setBounds(0, 62, 220, 0);
        jDesktopPane1.add(jSeparator2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane3.setBackground(new java.awt.Color(92, 130, 192));

        monthprevoius.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/previous.gif"))); // NOI18N
        monthprevoius.setBorderPainted(false);
        monthprevoius.setContentAreaFilled(false);
        monthprevoius.setNextFocusableComponent(monthnext);
        monthprevoius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthprevoiusActionPerformed(evt);
            }
        });
        monthprevoius.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        monthprevoius.setBounds(30, 0, 30, 30);
        jDesktopPane3.add(monthprevoius, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthnext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/next1.gif"))); // NOI18N
        monthnext.setBorderPainted(false);
        monthnext.setContentAreaFilled(false);
        monthnext.setNextFocusableComponent(monthend);
        monthnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthnextActionPerformed(evt);
            }
        });
        monthnext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        monthnext.setBounds(160, 0, 30, 30);
        jDesktopPane3.add(monthnext, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthval.setFont(new java.awt.Font("Verdana", 1, 12));
        monthval.setForeground(new java.awt.Color(255, 255, 255));
        monthval.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthval.setText("jLabel2");
        monthval.setBounds(40, 0, 140, 30);
        jDesktopPane3.add(monthval, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthbegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/rewind1.png"))); // NOI18N
        monthbegin.setBorderPainted(false);
        monthbegin.setContentAreaFilled(false);
        monthbegin.setNextFocusableComponent(monthprevoius);
        monthbegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthbeginActionPerformed(evt);
            }
        });
        monthbegin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        monthbegin.setBounds(0, 0, 30, 30);
        jDesktopPane3.add(monthbegin, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/fast_forward1.png"))); // NOI18N
        monthend.setBorderPainted(false);
        monthend.setContentAreaFilled(false);
        monthend.setNextFocusableComponent(jPanel1);
        monthend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthendActionPerformed(evt);
            }
        });
        monthend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });
        monthend.setBounds(190, 0, 30, 30);
        jDesktopPane3.add(monthend, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane3.setBounds(0, 30, 220, 30);
        jDesktopPane1.add(jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setInvisibleOnEsc(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 220, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 140, Short.MAX_VALUE)
        );

        jPanel1.setBounds(0, 60, 220, 140);
        jDesktopPane1.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDesktopPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDesktopPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    public void initmethod() {

        Calendar now1 = Calendar.getInstance();
        yearval.setText(String.valueOf(now1.get(Calendar.YEAR)));
        // yearPanel1.setYearval(now1.get(Calendar.YEAR));

        int dayValue = now1.get(Calendar.DAY_OF_MONTH);
        monthval.setText(month[now1.get(Calendar.MONTH)]);
        selectedmonth = now1.get(Calendar.MONTH);

        jPanel1.setLayout(new GridLayout(7, 7));
        jPanel1.setBackground(Color.white);


        daylabel = new JLabel[42];
        wdaylabel = new JLabel[7];
        for (int i = 0; i < 7; i++) {
            wdaylabel[i] = new JLabel(dayname[i], JLabel.CENTER);
            wdaylabel[i].setOpaque(true);
            wdaylabel[i].setBackground(Color.white);
            // wdaylabel[i].

           // wdaylabel[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISRetail/images/small/bar.jpg"))); // NOI18N
           // jPanel1.add(wdaylabel[i]);
           jPanel1.add( wrapInBackgroundImage(wdaylabel[i], new ImageIcon(getClass().getResource("/ISRetail/images/small/bar2.jpg"))));

        }
        for (int i = 0; i < 42; i++) {

            daylabel[i] = new JLabel("00", JLabel.CENTER);
            daylabel[i].setName(String.valueOf(i));
            daylabel[i].setBackground(new Color(255,255,255));
            daylabel[i].setOpaque(true);
            daylabel[i].setVisible(true);

            daylabel[i].addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseEntered(MouseEvent evt)
                {

                          System.out.println("evt xy : "+evt.getX()+" "+evt.getY());
                          JLabel tempLabel= (JLabel)evt.getComponent();
                          if(tempLabel.isFocusable() && Integer.parseInt(tempLabel.getText())==curCal.get(Calendar.DATE)  && Integer.parseInt(yearval.getText())== curCal.get(Calendar.YEAR) && selectedmonth == curCal.get(Calendar.MONTH));
                          else
                          tempLabel.setBackground(focusColor);
                          tempLabel.requestFocus();
                }

                public void mouseExited(MouseEvent evt)
                {
                          JLabel tempLabel= (JLabel)evt.getComponent();
                          System.out.println("evt xy : "+evt.getX()+" "+evt.getY());
                          if(tempLabel.isFocusable() && Integer.parseInt(tempLabel.getText())==curCal.get(Calendar.DATE)  && Integer.parseInt(yearval.getText())== curCal.get(Calendar.YEAR) && selectedmonth == curCal.get(Calendar.MONTH));
                          else

                          tempLabel.setBackground(new Color(255,255,255));
                }



                public void mouseClicked(java.awt.event.MouseEvent evt)
                {
                    jLabel1MouseClicked(evt);
                }

                private void jLabel1MouseClicked(MouseEvent evt)
                {
                    JLabel label = (JLabel) evt.getSource();
                    selectedday = label.getText();
                    if (selectedday.length() == 1) {
                        selectedday = "0" + label.getText();
                    } else {
                        selectedday = label.getText();
                    }

                    if (selectedmonth < 9) {
                        selmonth = "0" + String.valueOf(selectedmonth + 1);
                    } else {
                        selmonth = String.valueOf(selectedmonth + 1);
                    }
                    selyear = yearval.getText();
                    String dd = selectedday + "/" + selmonth + "/" + selyear;
                    if (label.getText() != null) {
                        if (label.getText().trim().length() > 0) {
                            datefield.setText(dd);
                            setVisible(false);

                            datefield.requestFocus(true);
                        }
                    }

                }
            });


            daylabel[i].addKeyListener(new KeyListener() {
                public void keyTyped(KeyEvent e) {
                }
                public void keyPressed(KeyEvent e) {
                }
                public void keyReleased(KeyEvent e) {
                    jLabel1KeyReleased(e);
                }
                private void jLabel1KeyReleased(KeyEvent evt) {
                    //if(evt != null && evt.getSource() != null && evt.getSource() instanceof JLabel)
                    {
                        JLabel label = (JLabel) evt.getSource();
                    if(evt.getKeyCode() == KeyEvent.VK_ESCAPE ){
                        setVisible(false);
                        datefield.requestFocus(true);
                    }else if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_SPACE) {

                        selectedday = label.getText();
                        if (selectedday.length() == 1) {
                            selectedday = "0" + label.getText();
                        } else {
                            selectedday = label.getText();
                        }

                        if (selectedmonth < 9) {
                            selmonth = "0" + String.valueOf(selectedmonth + 1);
                        } else {
                            selmonth = String.valueOf(selectedmonth + 1);
                        }
                        selyear = yearval.getText();
                        String dd = selectedday + "/" + selmonth + "/" + selyear;
                        if (label.getText() != null) {
                            if (label.getText().trim().length() > 0) {
                                datefield.setText(dd);
                                setVisible(false);

                                datefield.requestFocus(true);
                            }
                        }
                    }else if(evt.getKeyCode() == KeyEvent.VK_DOWN){
                        int selectedDay = 1;
                        try{
                            selectedDay = Integer.parseInt(label.getName());
                        }catch(Exception e){
                        }
                        if(selectedDay+7 > -1 && selectedDay+7 < 41 && daylabel[selectedDay+7].getText().length() > 0){
                            daylabel[selectedDay+7].requestFocus();
                        }else{

                        }

                    } else if(evt.getKeyCode() == KeyEvent.VK_UP){
                        int selectedDay = 1;
                        try{
                            selectedDay = Integer.parseInt(label.getName());
                        }catch(Exception e){
                        }
                        if(selectedDay-7 > -1 && selectedDay-7 < 41 && daylabel[selectedDay-7].getText().length() > 0){
                            daylabel[selectedDay-7].requestFocus();
                        }else{

                        }
                    } else if(evt.getKeyCode() == KeyEvent.VK_RIGHT){
                        int selectedDay = 1;
                        try{
                            selectedDay = Integer.parseInt(label.getName());
                        }catch(Exception e){
                        }
                        if(selectedDay+1 > -1 && selectedDay+1 < 41 && daylabel[selectedDay+1].getText().length() > 0){
                            daylabel[selectedDay+1].requestFocus();
                        }else{

                        }
                    } else if(evt.getKeyCode() == KeyEvent.VK_LEFT){
                        int selectedDay = 1;
                        try{
                            selectedDay = Integer.parseInt(label.getName());
                        }catch(Exception e){
                        }
                        if(selectedDay-1 > -1 && selectedDay-1 < 41 && daylabel[selectedDay-1].getText().length() > 0){
                            daylabel[selectedDay-1].requestFocus();
                        }else{

                        }
                    }
                    }
                }
            });

            daylabel[i].setPreferredSize(new Dimension(40, 40));
            jPanel1.add(daylabel[i]);
//            jPanel1.setNextFocusableComponent(daylabel[0]);
//            if (i > 0 && daylabel[i - 1] != null) {
//                daylabel[i - 1].setNextFocusableComponent(daylabel[i]);
//            }
        }

       
        /*Calendar cc = Calendar.getInstance();
        cc.setTime(ConvertDate.getStringToDate(MainForm.todaysDateFromISR, "dd/MM/yyyy"));
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(ConvertDate.getStringToDate(MainForm.todaysDateFromISR, "dd/MM/yyyy"));
        Calendar c1 = Calendar.getInstance();
        c1.setTime(ConvertDate.getStringToDate(MainForm.todaysDateFromISR, "dd/MM/yyyy"));
        Calendar c2 = Calendar.getInstance();
        c2.setTime(ConvertDate.getStringToDate(MainForm.todaysDateFromISR, "dd/MM/yyyy"));
*/
        Calendar cc = Calendar.getInstance();
        Calendar cal1 = Calendar.getInstance();
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        setDates(cc, cal1, c1, c2);
        if(daylabel[0] != null)
        jPanel1.setNextFocusableComponent(daylabel[0]);
         jPanel1.requestFocus();
        daylabel[focussed].requestFocus();


        first=false;
        jPanel1.invalidate();
        jPanel1.repaint();

        this.repaint();



    }

    public void setDates(Calendar cc, Calendar cal1, Calendar c1, Calendar c2) {


        cal1a = cal1;

        yearstr = cc.get(Calendar.YEAR);
        monstr = cc.get(Calendar.MONTH);

        daystr = cc.get(Calendar.DAY_OF_MONTH);

        cal1.set(yearstr, monstr, 1);

        int dayoftheweek = cal1.get(Calendar.DAY_OF_WEEK);
        cal1.add(Calendar.DAY_OF_MONTH, -(dayoftheweek));


        c1.set(Calendar.DATE, c1.getActualMinimum(Calendar.DATE));
        c2.set(Calendar.DATE, c2.getActualMaximum(Calendar.DATE));


        for (int i = 0; i < 42; i++) {
            cal1.add(Calendar.DAY_OF_MONTH, 1);
            //daylabel[i] = new JLabel(String.valueOf(cal1.get(Calendar.DAY_OF_MONTH)),JLabel.RIGHT);
            daylabel[i].setText(String.valueOf(cal1.get(Calendar.DAY_OF_MONTH)));

            daylabel[i].setForeground(new Color(62,100,162));

            if (cal1.before(c1)) {
                daylabel[i].setText("");
            }
            //daylabel[i].setForeground(Color.RED);

            if (cal1.after(c2)) {
                daylabel[i].setText("");
            }


            if(i < 40)
               daylabel[i].setNextFocusableComponent(daylabel[i+1]);
            else
              daylabel[i].setNextFocusableComponent(this);

            if(daylabel[i].getText().length() != 0)
              daylabel[i].setFocusable(true);
            else
              daylabel[i].setFocusable(false);

           // System.out.println("curCal= "+yearval.getText()+" "+daylabel[i].getText()+" "+curCal.get(Calendar.DATE)+" "+curCal.get(Calendar.MONTH)+" "+curCal.get(Calendar.YEAR));
          //  System.out.println("cal1= "+yearval.getText()+" "+daylabel[i].getText()+" "+cal1.get(Calendar.DATE)+" "+cal1.get(Calendar.MONTH)+" "+cal1.get(Calendar.YEAR));

               JLabel tempLabel = daylabel[i];


               if(tempLabel.isFocusable()&&Integer.parseInt(tempLabel.getText())==curCal.get(Calendar.DATE)  && Integer.parseInt(yearval.getText())== curCal.get(Calendar.YEAR) && selectedmonth == curCal.get(Calendar.MONTH))
               // if(cal1.get(Calendar.DATE)==curCal.get(Calendar.DATE)&& cal1.get(Calendar.MONTH)==curCal.get(Calendar.MONTH) && cal1.get(Calendar.YEAR)==curCal.get(Calendar.YEAR))
            {
              System.out.println("Current Date");
             // daylabel[i].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
              //daylabel[i].setBackground(new java.awt.Color(160,210, 245));
              daylabel[i].setBackground(curDateColor);
              daylabel[i].requestFocus();
              focussed=i;


            }
            else
                 daylabel[i].setBackground(Color.white);

              daylabel[i].addFocusListener(new FocusListener() {

                  final Calendar c1 =  cal1a;
                public void focusGained(FocusEvent evt) {
                    System.out.println("foccuessed...");
                    JLabel tempLabel = (JLabel) evt.getSource();
                     if(Integer.parseInt(tempLabel.getText())==curCal.get(Calendar.DATE)  && Integer.parseInt(yearval.getText())== curCal.get(Calendar.YEAR) && selectedmonth == curCal.get(Calendar.MONTH))
                     tempLabel.setBackground(curDateColor);
                      else
                     tempLabel.setBackground(focusColor);

                    tempLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                }

                public void focusLost(FocusEvent e) {
                    JLabel tempLabel = (JLabel) e.getSource();
                     if(Integer.parseInt(tempLabel.getText())==curCal.get(Calendar.DATE)  && Integer.parseInt(yearval.getText())== curCal.get(Calendar.YEAR) && selectedmonth == curCal.get(Calendar.MONTH));
                      else
                     tempLabel.setBackground(Color.white);

               if(c1.get(Calendar.DAY_OF_MONTH)!=curCal.get(Calendar.DATE) || c1.get(Calendar.MONTH)!=curCal.get(Calendar.MONTH) || c1.get(Calendar.YEAR)!=curCal.get(Calendar.YEAR))
                    tempLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
                }
            });

        //daylabel[i].setForeground(Color.GREEN);
        }


    }

    public void setDatesInFormFocus(Calendar cc, Calendar cal1, Calendar c1, Calendar c2) {

        yearstr = cc.get(Calendar.YEAR);
        monstr = cc.get(Calendar.MONTH);

        daystr = cc.get(Calendar.DAY_OF_MONTH);

        cal1.set(yearstr, monstr, 1);

        int dayoftheweek = cal1.get(Calendar.DAY_OF_WEEK);
        cal1.add(Calendar.DAY_OF_MONTH, -(dayoftheweek));


        c1.set(Calendar.DATE, c1.getActualMinimum(Calendar.DATE));
        c2.set(Calendar.DATE, c2.getActualMaximum(Calendar.DATE));


        for (int i = 0; i < 42; i++) {
            cal1.add(Calendar.DAY_OF_MONTH, 1);
            //daylabel[i] = new JLabel(String.valueOf(cal1.get(Calendar.DAY_OF_MONTH)),JLabel.RIGHT);
            daylabel[i].setText(String.valueOf(cal1.get(Calendar.DAY_OF_MONTH)));

            daylabel[i].setForeground(Color.BLUE);

            if (cal1.before(c1)) {
                daylabel[i].setText("");
            }
            //daylabel[i].setForeground(Color.RED);

            if (cal1.after(c2)) {
                daylabel[i].setText("");
            }


            if(i < 40)
               daylabel[i].setNextFocusableComponent(daylabel[i+1]);
            else
              daylabel[i].setNextFocusableComponent(year10back);

            if(daylabel[i].getText().length() != 0)
              daylabel[i].setFocusable(true);
            else
              daylabel[i].setFocusable(false);


            if(daylabel[i].getText().equalsIgnoreCase(String.valueOf(daystr))){
                daylabel[i].requestFocus();
            }

        //daylabel[i].setForeground(Color.GREEN);
        }


    }


    public void changeMonth1() {


        Calendar f1 = Calendar.getInstance();
        f1.set(Integer.parseInt(yearval.getText()), selectedmonth, 1);


        Calendar f2 = Calendar.getInstance();
        f2.set(Integer.parseInt(yearval.getText()), selectedmonth, 1);


        Calendar f3 = Calendar.getInstance();
        f3.set(Integer.parseInt(yearval.getText()), selectedmonth, 1);

        Calendar f4 = Calendar.getInstance();
        f4.set(Integer.parseInt(yearval.getText()), selectedmonth, 1);

        setDates(f1, f2, f3, f4);

    }

    private void yearpreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearpreviousActionPerformed
        // TODO add your handling code here:

        int year = Integer.parseInt(yearval.getText());
        year--;
        if (year < 1900) {
            year = 1900;
        }
        //yearPanel1.setYearval(year);
        yearval.setText(String.valueOf(year));
        Calendar f1 = Calendar.getInstance();
        f1.set(year, selectedmonth, 1);
        Calendar f2 = Calendar.getInstance();
        f2.set(year, selectedmonth, 1);
        Calendar f3 = Calendar.getInstance();
        f3.set(year, selectedmonth, 1);
        Calendar f4 = Calendar.getInstance();
        f4.set(year, selectedmonth, 1);
        setDates(f1, f2, f3, f4);
    }//GEN-LAST:event_yearpreviousActionPerformed

    private void year10nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_year10nextActionPerformed
        // TODO add your handling code here:
        int year = Integer.parseInt(yearval.getText());
        year = year + 10;
        if (year < 1900) {
            year = 1900;
        }
        //yearPanel1.setYearval(year);
        yearval.setText(String.valueOf(year));
        Calendar f1 = Calendar.getInstance();
        f1.set(year, selectedmonth, 1);
        Calendar f2 = Calendar.getInstance();
        f2.set(year, selectedmonth, 1);
        Calendar f3 = Calendar.getInstance();
        f3.set(year, selectedmonth, 1);
        Calendar f4 = Calendar.getInstance();
        f4.set(year, selectedmonth, 1);
        setDates(f1, f2, f3, f4);
    }//GEN-LAST:event_year10nextActionPerformed

    private void year10backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_year10backActionPerformed
        // TODO add your handling code here:

        int year = Integer.parseInt(yearval.getText());
        year = year - 10;
        if (year < 1900) {
            year = 1900;
        }
        //yearPanel1.setYearval(year);
        yearval.setText(String.valueOf(year));
        Calendar f1 = Calendar.getInstance();
        f1.set(year, selectedmonth, 1);
        Calendar f2 = Calendar.getInstance();
        f2.set(year, selectedmonth, 1);
        Calendar f3 = Calendar.getInstance();
        f3.set(year, selectedmonth, 1);
        Calendar f4 = Calendar.getInstance();
        f4.set(year, selectedmonth, 1);
        setDates(f1, f2, f3, f4);
    }//GEN-LAST:event_year10backActionPerformed

    private void yearnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearnextActionPerformed
        // TODO add your handling code here:
        int year = Integer.parseInt(yearval.getText());
        year++;
        yearval.setText(String.valueOf(year));

        Calendar f1 = Calendar.getInstance();
        f1.set(year, selectedmonth, 1);


        Calendar f2 = Calendar.getInstance();
        f2.set(year, selectedmonth, 1);


        Calendar f3 = Calendar.getInstance();
        f3.set(year, selectedmonth, 1);

        Calendar f4 = Calendar.getInstance();
        f4.set(year, selectedmonth, 1);


        setDates(f1, f2, f3, f4);
    }//GEN-LAST:event_yearnextActionPerformed

    private void monthprevoiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthprevoiusActionPerformed
        // TODO add your handling code here:

        int year;
        selectedmonth--;

        if (selectedmonth < 0) {
            selectedmonth = 11;
            year = Integer.parseInt(yearval.getText());
            year--;
            if (year < 1900) {
                year = 1900;
            }

            yearval.setText(String.valueOf(year));
        }
        monthval.setText(month[selectedmonth]);
        changeMonth1();
    }//GEN-LAST:event_monthprevoiusActionPerformed

    private void monthnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthnextActionPerformed
        // TODO add your handling code here:

        selectedmonth++;
        int year;
        if (selectedmonth > 11) {
            selectedmonth = 0;
            year = Integer.parseInt(yearval.getText());
            year++;
            yearval.setText(String.valueOf(year));
        }
        monthval.setText(month[selectedmonth]);
        changeMonth1();
    }//GEN-LAST:event_monthnextActionPerformed

    private void monthbeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthbeginActionPerformed
        // TODO add your handling code here:
        int year;
        selectedmonth = 0;

        if (selectedmonth < 0) {
            selectedmonth = 11;
            year = Integer.parseInt(yearval.getText());
            year--;
            if (year < 1900) {
                year = 1900;
            }

            yearval.setText(String.valueOf(year));
        }
        monthval.setText(month[selectedmonth]);
        changeMonth1();
    }//GEN-LAST:event_monthbeginActionPerformed

    private void monthendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthendActionPerformed
        // TODO add your handling code here:
        int year;
        selectedmonth = 11;

        if (selectedmonth < 0) {
            selectedmonth = 11;
            year = Integer.parseInt(yearval.getText());
            year--;
            if (year < 1900) {
                year = 1900;
            }

            yearval.setText(String.valueOf(year));
        }
        monthval.setText(month[selectedmonth]);
        changeMonth1();
    }//GEN-LAST:event_monthendActionPerformed

    private void setInvisibleOnEsc(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setInvisibleOnEsc
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.setVisible(false);
            datefield.requestFocus(true);
        }
        
    }//GEN-LAST:event_setInvisibleOnEsc

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        // TODO add your handling code here:
      /*  if(!evt.getOppositeComponent().equals(daylabel[0])){
        if(daylabel[0] != null){
            daylabel[0].requestFocus();
        }
        }else{
            monthend.requestFocus();
        }*/
         if(first)
            daylabel[focussed].requestFocus();
        else
        (jPanel1.getComponents()[0]).transferFocus();

            
       
    }//GEN-LAST:event_jPanel1FocusGained

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

        //TODO add your handling code here:
        Calendar now1 = Calendar.getInstance();
        yearval.setText(String.valueOf(now1.get(Calendar.YEAR)));
        // yearPanel1.setYearval(now1.get(Calendar.YEAR));
        selyear = yearval.getText();
        monthval.setText(month[now1.get(Calendar.MONTH)]);
        selectedmonth = now1.get(Calendar.MONTH);

         Calendar cc = Calendar.getInstance();
        Calendar cal1 = Calendar.getInstance();
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        setDatesInFormFocus(cc, cal1, c1, c2);

    }//GEN-LAST:event_formFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JDesktopPane jDesktopPane3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton monthbegin;
    private javax.swing.JButton monthend;
    private javax.swing.JButton monthnext;
    private javax.swing.JButton monthprevoius;
    private javax.swing.JLabel monthval;
    private javax.swing.JButton year10back;
    private javax.swing.JButton year10next;
    private javax.swing.JButton yearnext;
    private javax.swing.JButton yearprevious;
    private javax.swing.JLabel yearval;
    // End of variables declaration//GEN-END:variables
    public JFormattedTextField getDatefield() {
        return datefield;
    }

    public void setDate(JFormattedTextField datefield) {
        this.datefield = datefield;
    }

    public boolean isVisibility() {
        return visibility;
    }

    public void setVisibility(boolean visibility) {
        this.visibility = visibility;
        this.setVisible(visibility);
    }
}
